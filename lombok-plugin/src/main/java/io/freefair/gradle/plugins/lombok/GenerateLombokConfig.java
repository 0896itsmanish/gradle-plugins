package io.freefair.gradle.plugins.lombok;

import lombok.Getter;
import lombok.Setter;
import lombok.SneakyThrows;
import org.codehaus.groovy.runtime.ResourceGroovyMethods;
import org.gradle.api.DefaultTask;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;

import java.io.File;
import java.io.PrintWriter;
import java.util.Comparator;
import java.util.Map;

@Getter
@Setter
public class GenerateLombokConfig extends DefaultTask {

  @OutputFile
  private File outputFile = getProject().file("lombok.config");

  @Input
  private Map<String, String> properties;

  public GenerateLombokConfig() {
    onlyIf(t -> getProperties() != null && !getProperties().isEmpty());
  }

  @TaskAction
  @SneakyThrows
  public void generateLombokConfig() {
    try (PrintWriter writer = ResourceGroovyMethods.newPrintWriter(outputFile, "ISO-8859-1")) {
      writer.println("# This file is generated by the 'io.freefair.lombok' Gradle plugin");
      properties.entrySet().stream()
        .sorted(Comparator.comparing(Map.Entry::getKey, String.CASE_INSENSITIVE_ORDER))
        .forEach(entry ->
          writer.println(entry.getKey() + " = " + entry.getValue())
        );
    }
  }
}
